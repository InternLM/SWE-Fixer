2025-02-12 13:17:48,930 - INFO - Environment image sweb.env.x86_64.aa92880033da20ca313928:latest found for scikit-learn__scikit-learn-13497
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-13497:latest for scikit-learn__scikit-learn-13497
2025-02-12 13:17:48,931 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-13497:latest already exists, skipping build.
2025-02-12 13:17:48,931 - INFO - Creating container for scikit-learn__scikit-learn-13497...
2025-02-12 13:17:48,973 - INFO - Container for scikit-learn__scikit-learn-13497 created: b8d9629b5439d2c53a153ce18557dd387baa2222f76ef47ebb3f510081a726b0
2025-02-12 13:17:49,628 - INFO - Container for scikit-learn__scikit-learn-13497 started: b8d9629b5439d2c53a153ce18557dd387baa2222f76ef47ebb3f510081a726b0
2025-02-12 13:17:49,628 - INFO - Intermediate patch for scikit-learn__scikit-learn-13497 written to logs/run_evaluation/20250212_130622/SWE-Fixer/scikit-learn__scikit-learn-13497/patch.diff, now applying to container...
2025-02-12 13:17:49,864 - INFO - Failed to apply patch to container, trying again...
2025-02-12 13:17:49,944 - INFO - >>>>> Applied Patch:
patching file sklearn/feature_selection/mutual_info_.py
patching file sklearn/feature_selection/mutual_info_.py
Hunk #1 succeeded at 299 (offset 15 lines).

2025-02-12 13:17:50,488 - INFO - Git diff before:
diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..002cd4247 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -250,19 +250,34 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     if discrete_features == 'auto':
         discrete_features = issparse(X)
 
-    if isinstance(discrete_features, bool):
-        discrete_mask = np.empty(n_features, dtype=bool)
-        discrete_mask.fill(discrete_features)
+    if isinstance(discrete_features, (str, bool)):
+        if isinstance(discrete_features, bool):
+            discrete_mask = np.empty(n_features, dtype=bool)
+            discrete_mask.fill(discrete_features)
+        else:
+            raise ValueError("Invalid value for the discrete_features parameter: '{}'.".format(discrete_features) +
+                             "Allowed values are 'auto' or array-like of shape (n_features,) or (n_selected_features,) with dtype bool or int.")
     else:
         discrete_features = np.asarray(discrete_features)
-        if discrete_features.dtype != 'bool':
+        if discrete_features.dtype == 'bool':
+            if discrete_features.shape[0] == n_features:
+                discrete_mask = discrete_features
+            elif discrete_features.shape[0] == 1:
+                discrete_mask = np.empty(n_features, dtype=bool)
+                discrete_mask.fill(discrete_features[0])
+            else:
+                raise ValueError("Invalid shape for the discrete_features parameter: '{}'.".format(discrete_features.shape) +
+                                 "Allowed shapes are (n_features,) or (n_selected_features,) with dtype bool or int.")
+        elif discrete_features.dtype == 'int':
             discrete_mask = np.zeros(n_features, dtype=bool)
             discrete_mask[discrete_features] = True
         else:
-            discrete_mask = discrete_features
+            raise ValueError("Invalid dtype for the discrete_features parameter: '{}'.".format(discrete_features.dtype) +
+                             "Allowed dtypes are bool or int.")
 
     continuous_mask = ~discrete_mask
     if np.any(continuous_mask) and issparse(X):
+
         raise ValueError("Sparse matrix `X` can't have continuous features.")
 
     rng = check_random_state(random_state)
@@ -284,13 +299,15 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
         y = scale(y, with_mean=False)
         y += 1e-10 * np.maximum(1, np.mean(np.abs(y))) * rng.randn(n_samples)
 
-    mi = [_compute_mi(x, y, discrete_feature, discrete_target, n_neighbors) for
-          x, discrete_feature in zip(_iterate_columns(X), discrete_mask)]
+    mi = np.empty(n_features)
+    for i, (x, discrete_feature) in enumerate(zip(_iterate_columns(X), discrete_mask)):
+        mi[i] = _compute_mi(x, y, discrete_feature, discrete_target, n_neighbors)
 
-    return np.array(mi)
+    return mi
 
 
 def mutual_info_regression(X, y, discrete_features='auto', n_neighbors=3,
+
                            copy=True, random_state=None):
     """Estimate mutual information for a continuous target variable.
2025-02-12 13:17:50,488 - INFO - Eval script for scikit-learn__scikit-learn-13497 written to logs/run_evaluation/20250212_130622/SWE-Fixer/scikit-learn__scikit-learn-13497/eval.sh; copying to container...
2025-02-12 13:17:58,985 - INFO - Test runtime: 8.30 seconds
2025-02-12 13:17:58,985 - INFO - Test output for scikit-learn__scikit-learn-13497 written to logs/run_evaluation/20250212_130622/SWE-Fixer/scikit-learn__scikit-learn-13497/test_output.txt
2025-02-12 13:17:59,041 - INFO - Git diff after:
diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..002cd4247 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -250,19 +250,34 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     if discrete_features == 'auto':
         discrete_features = issparse(X)
 
-    if isinstance(discrete_features, bool):
-        discrete_mask = np.empty(n_features, dtype=bool)
-        discrete_mask.fill(discrete_features)
+    if isinstance(discrete_features, (str, bool)):
+        if isinstance(discrete_features, bool):
+            discrete_mask = np.empty(n_features, dtype=bool)
+            discrete_mask.fill(discrete_features)
+        else:
+            raise ValueError("Invalid value for the discrete_features parameter: '{}'.".format(discrete_features) +
+                             "Allowed values are 'auto' or array-like of shape (n_features,) or (n_selected_features,) with dtype bool or int.")
     else:
         discrete_features = np.asarray(discrete_features)
-        if discrete_features.dtype != 'bool':
+        if discrete_features.dtype == 'bool':
+            if discrete_features.shape[0] == n_features:
+                discrete_mask = discrete_features
+            elif discrete_features.shape[0] == 1:
+                discrete_mask = np.empty(n_features, dtype=bool)
+                discrete_mask.fill(discrete_features[0])
+            else:
+                raise ValueError("Invalid shape for the discrete_features parameter: '{}'.".format(discrete_features.shape) +
+                                 "Allowed shapes are (n_features,) or (n_selected_features,) with dtype bool or int.")
+        elif discrete_features.dtype == 'int':
             discrete_mask = np.zeros(n_features, dtype=bool)
             discrete_mask[discrete_features] = True
         else:
-            discrete_mask = discrete_features
+            raise ValueError("Invalid dtype for the discrete_features parameter: '{}'.".format(discrete_features.dtype) +
+                             "Allowed dtypes are bool or int.")
 
     continuous_mask = ~discrete_mask
     if np.any(continuous_mask) and issparse(X):
+
         raise ValueError("Sparse matrix `X` can't have continuous features.")
 
     rng = check_random_state(random_state)
@@ -284,13 +299,15 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
         y = scale(y, with_mean=False)
         y += 1e-10 * np.maximum(1, np.mean(np.abs(y))) * rng.randn(n_samples)
 
-    mi = [_compute_mi(x, y, discrete_feature, discrete_target, n_neighbors) for
-          x, discrete_feature in zip(_iterate_columns(X), discrete_mask)]
+    mi = np.empty(n_features)
+    for i, (x, discrete_feature) in enumerate(zip(_iterate_columns(X), discrete_mask)):
+        mi[i] = _compute_mi(x, y, discrete_feature, discrete_target, n_neighbors)
 
-    return np.array(mi)
+    return mi
 
 
 def mutual_info_regression(X, y, discrete_features='auto', n_neighbors=3,
+
                            copy=True, random_state=None):
     """Estimate mutual information for a continuous target variable.
2025-02-12 13:17:59,041 - INFO - Grading answer for scikit-learn__scikit-learn-13497...
2025-02-12 13:17:59,052 - INFO - report: {'scikit-learn__scikit-learn-13497': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/feature_selection/tests/test_mutual_info.py::test_mutual_info_options']}, 'PASS_TO_PASS': {'success': ['sklearn/feature_selection/tests/test_mutual_info.py::test_compute_mi_dd', 'sklearn/feature_selection/tests/test_mutual_info.py::test_compute_mi_cc', 'sklearn/feature_selection/tests/test_mutual_info.py::test_compute_mi_cd', 'sklearn/feature_selection/tests/test_mutual_info.py::test_compute_mi_cd_unique_label', 'sklearn/feature_selection/tests/test_mutual_info.py::test_mutual_info_classif_discrete', 'sklearn/feature_selection/tests/test_mutual_info.py::test_mutual_info_regression', 'sklearn/feature_selection/tests/test_mutual_info.py::test_mutual_info_classif_mixed'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-13497: resolved: False
2025-02-12 13:17:59,052 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-13497.20250212_130622...
2025-02-12 13:18:14,391 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-13497.20250212_130622...
2025-02-12 13:18:14,409 - INFO - Container sweb.eval.scikit-learn__scikit-learn-13497.20250212_130622 removed.
